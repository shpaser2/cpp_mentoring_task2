name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    
    timeout-minutes: 3

    steps:
    - uses: actions/checkout@v3

    - name: Set up Clang 16
      uses: actions/setup-clang@v1
      with:
        clang-version: 16

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=clang++

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Run
      working-directory: ${{github.workspace}}/build
      # Run your program and generate the output file
      run: ./Debug/myProg ./../fileToCopy.txt out.txt

    - name: Check
      working-directory: ${{github.workspace}}/build
      # Compare the files and generate the comparison log
      run: |
        if diff -q fileToCopy.txt build/out.txt >/dev/null; then
          echo "Files are equal"
        else
          echo "Files are different"
        fi
